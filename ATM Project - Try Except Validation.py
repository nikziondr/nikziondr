import random 
import Database
import validator
from getpass import getpass

userDetails = [] #Empty list used to save user personal details for easier access later by their index numbers
acct_balance = 0

def init(): #First function, will ask user if they have an acct and if it'll take them to the register() function to create one
    print('Welcome to Bank PHP')
    haveAccount = int(input('Do you have an account with us?: Type 1 for Yes, or 2 No \n'))
    if(haveAccount == 1):
        login()
    elif(haveAccount == 2):
        register()
    else:
        print('You have selected an invalid option, please try again')
        init()


def register(): #This function will handle creating and saving user details for a new account
    global email, first_name, last_name, password, accountNumber #Used the built-in 'Global' keyword here to make the 4 variables I created right after available outside of this function, otherwise they wouldn't be 'seen' by the other functions. Could've maybe just called them at the very top outside a function also.
    print('***Answer the following prompts to register with us:***')
    email = input('What is your email address? \n')
    first_name = input('What is your first name? \n')
    last_name = input('What is your last name? \n')
    password = getpass('Create a password for yourself \n')

    accountNumber = generateAccountNumber() # assigns the random number generated by the generateAccountNumber() function to this variable so we can then save it onto the database dictionary as the key
    
    is_user_created = Database.create(accountNumber, first_name, last_name, email, password)

    if is_user_created:
        print('===Your account has been created!===')
        print('*** Your account number is ' + str(accountNumber) + ' *** \n') #Displaying the acct number the generateAccountNumber() function created so they can write it down
        login() #After the register functions runs successfully we can call the login() fuction so the user can login with their new info
    else:
        print('Something went wrong, please try again')
        register()

def login(): 
    accountNumberEntered = input('What is your account number? \n') #We're saving the acct # the user enters to a variable so we can compare it to the number saved in the database dictionary to see if it's found in there
    isAcctNumValid = validator.accountNumberValidator(accountNumberEntered)
    if isAcctNumValid:
        passwordEntered = getpass('What is your password? \n')
        user = Database.auth_user(accountNumberEntered, passwordEntered)
        if user:
            Database.login_session_stamp(user)
            bankOperations(user)
    else:
        ('Account number invalid, try again')
        init()

def bankOperations(user): 
    print('Welcome %s %s' % (user[1], user[2])) 
    print('Your current balance is $' + str(user[5]))
    option = int(input('What would you like to do? 1.Deposit 2.Withdrawal 3.Logout 4.Exit Program\n')) #used int because in the next few lines it's comparing to integers, not strings. YOu could also make the options strings by putting '' on them and not do the int() method
    if (option == 1):
        depositOperation(user)
    elif(option == 2):
        withdrawalOperation(user)
    elif(option == 3):
        Database.account_balance(user)
        Database.logout_stamp_delete(user)
        login()
    elif(option == 4):
        exit()
    else:
        print("Please select a valid option")
        bankOperations(user)


def generateAccountNumber():
    return random.randrange(1111111111,9999999999) #Using the 'randrange' method built into the random module to create a random number within the range specified inside the () and then returning the value using the 'return' statement.


def depositOperation(user):
    print('You selected Deposit')
    while True: #Another while loop so that it can repeat code if the user wants to redo the deposit amount by choosing option 2. in line 69
        depositAmount = int(input("Please enter the amount you'd like to deposit \n")) #Created this variable so we can remember and use the amount of the deposit the user enters
        confirmDeposit = int(input('The amount to deposit is $' + str(depositAmount) + ', is this correct? 1. Yes 2. No \n')) #had to turn depositAmount into string so that I could concatenate (join) it to the strings inside the '' like this. You can also use the %s method
        if confirmDeposit == 1:
            user[5] = int(user[5]) + depositAmount
            print(user[5])
            print('***Your deposit was successful!***')
            print('===Going back to the main menu===')
            bankOperations(user) #If user confirms deposit then we call bankOperations() so they can choose another operation or exit the program
        else:
            continue #if they choose option 2 (no) it loops back to line 67 where the While loop began to ask for the amount again


def withdrawalOperation(user): 
    print('You selected Withdraw')
    while True: #Same idea as While loop in line 67
        withdrawAmount = int(input("Please enter the amount you'd like to withdraw \n"))
        confirmWithdrawal = int(input('The amount to withdraw is $' + str(withdrawAmount) + ', is this correct? 1. Yes 2. No \n'))
        if confirmWithdrawal == 1:
            user[5] = int(user[5]) - withdrawAmount
            print(user[5])
            print('***Your withdrawal was successful!***')
            print('===Going back to the main menu===')
            bankOperations(user)
        else:
            continue 
        
        

init()